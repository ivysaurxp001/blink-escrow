import { writeFileSync, readFileSync, mkdirSync, existsSync } from "fs";
import path from "path";
import { ethers } from "hardhat";

const ADDR_PATH = path.join(process.cwd(), "contracts", "addresses.json");
const FE_PATH = path.join(process.cwd(), "..", "site", "src", "config", "contracts.ts");

function updateAddresses(chainId: string, name: string, addr: string) {
  let db: any = {};
  if (existsSync(ADDR_PATH)) {
    db = JSON.parse(readFileSync(ADDR_PATH, "utf8"));
  }
  if (!db[chainId]) db[chainId] = {};
  db[chainId][name] = addr;
  mkdirSync(path.dirname(ADDR_PATH), { recursive: true });
  writeFileSync(ADDR_PATH, JSON.stringify(db, null, 2));
  return db;
}

function writeFrontendConfig(db: any) {
  const ts = `// auto-generated by deploy script. DO NOT EDIT.
export const CONTRACTS: Record<string, Record<string,string>> = ${JSON.stringify(db, null, 2)} as const;
export const BLIND_ESCROW_ADDR = CONTRACTS["11155111"]?.BlindEscrow ?? "";
export const MOCK_USDC_ADDR    = CONTRACTS["11155111"]?.MockUSDC ?? "";
export const MOCK_DAI_ADDR     = CONTRACTS["11155111"]?.MockDAI ?? "";
`;
  mkdirSync(path.dirname(FE_PATH), { recursive: true });
  writeFileSync(FE_PATH, ts);
}

async function main() {
  console.log("üöÄ Starting deployment with address management...");
  
  const [deployer] = await ethers.getSigners();
  const network = await ethers.provider.getNetwork();
  const chainId = String(network.chainId);
  
  console.log(`Deployer: ${deployer.address}`);
  console.log(`Network: ${network.name} (${chainId})`);

  // Deploy Mock tokens
  console.log("üì¶ Deploying Mock Tokens...");
  const MT = await ethers.getContractFactory("MockToken");
  
  const usdc = await MT.deploy("MockUSDC", "mUSDC", 6);
  await usdc.waitForDeployment();
  const usdcAddr = await usdc.getAddress();
  console.log(`‚úÖ MockUSDC deployed at: ${usdcAddr}`);
  
  const dai = await MT.deploy("MockDAI", "mDAI", 18);
  await dai.waitForDeployment();
  const daiAddr = await dai.getAddress();
  console.log(`‚úÖ MockDAI deployed at: ${daiAddr}`);

  // Mint tokens for testing
  console.log("ü™ô Minting tokens for testing...");
  await usdc.mint(deployer.address, ethers.parseUnits("100000", 6));
  await dai.mint(deployer.address, ethers.parseUnits("100000", 18));
  console.log("‚úÖ Tokens minted");

  // Deploy BlindEscrow
  console.log("üì¶ Deploying BlindEscrow...");
  const Escrow = await ethers.getContractFactory("BlindEscrow");
  const escrow = await Escrow.deploy();
  await escrow.waitForDeployment();
  const escrowAddr = await escrow.getAddress();
  console.log(`‚úÖ BlindEscrow deployed at: ${escrowAddr}`);

  // Update addresses.json
  console.log("üìù Updating addresses...");
  let db = updateAddresses(chainId, "MockUSDC", usdcAddr);
  db = updateAddresses(chainId, "MockDAI", daiAddr);
  db = updateAddresses(chainId, "BlindEscrow", escrowAddr);

  // Generate frontend config.ts
  writeFrontendConfig(db);

  console.log("‚úÖ Addresses written to:", ADDR_PATH);
  console.log("‚úÖ Frontend config updated:", FE_PATH);
  
  console.log("\nüéâ Deployment completed successfully!");
  console.log("üìã Summary:");
  console.log(`   ‚Ä¢ BlindEscrow: ${escrowAddr}`);
  console.log(`   ‚Ä¢ MockUSDC: ${usdcAddr}`);
  console.log(`   ‚Ä¢ MockDAI: ${daiAddr}`);
  
  console.log("\nüöÄ Next steps:");
  console.log("   1. Restart frontend to pick up new addresses");
  console.log("   2. Test the complete workflow");
}

main().catch((e) => { 
  console.error("‚ùå Deployment failed:", e); 
  process.exit(1); 
});

console.log("üß™ Testing deployment script...");

// Test address management functions
import { writeFileSync, readFileSync, mkdirSync, existsSync } from "fs";
import path from "path";

const ADDR_PATH = path.join(process.cwd(), "contracts", "addresses.json");
const FE_PATH = path.join(process.cwd(), "..", "site", "src", "config", "contracts.ts");

console.log("ADDR_PATH:", ADDR_PATH);
console.log("FE_PATH:", FE_PATH);

// Test creating directories
try {
  mkdirSync(path.dirname(ADDR_PATH), { recursive: true });
  console.log("‚úÖ Created contracts directory");
} catch (e) {
  console.log("‚ùå Failed to create contracts directory:", e.message);
}

// Test writing addresses.json
try {
  const testData = {
    "11155111": {
      "BlindEscrow": "0x1234567890123456789012345678901234567890",
      "MockUSDC": "0x2345678901234567890123456789012345678901",
      "MockDAI": "0x3456789012345678901234567890123456789012"
    }
  };
  
  writeFileSync(ADDR_PATH, JSON.stringify(testData, null, 2));
  console.log("‚úÖ Written test addresses.json");
} catch (e) {
  console.log("‚ùå Failed to write addresses.json:", e.message);
}

// Test writing frontend config
try {
  const ts = `// auto-generated by deploy script. DO NOT EDIT.
export const CONTRACTS: Record<string, Record<string,string>> = {
  "11155111": {
    "BlindEscrow": "0x1234567890123456789012345678901234567890",
    "MockUSDC": "0x2345678901234567890123456789012345678901",
    "MockDAI": "0x3456789012345678901234567890123456789012"
  }
} as const;

export const BLIND_ESCROW_ADDR = CONTRACTS["11155111"]?.BlindEscrow ?? "";
export const MOCK_USDC_ADDR    = CONTRACTS["11155111"]?.MockUSDC ?? "";
export const MOCK_DAI_ADDR     = CONTRACTS["11155111"]?.MockDAI ?? "";
`;
  
  mkdirSync(path.dirname(FE_PATH), { recursive: true });
  writeFileSync(FE_PATH, ts);
  console.log("‚úÖ Written frontend config");
} catch (e) {
  console.log("‚ùå Failed to write frontend config:", e.message);
}

console.log("üéâ Test completed!");